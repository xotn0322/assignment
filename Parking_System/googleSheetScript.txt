var spreadsheetApp = SpreadsheetApp;
var sheetId1 = spreadsheetApp.openById("1Ii9pDz5vCEXB3OYxsZE7JfPNzEJ4c-S-2pjXdMGvo2Y"); //차량 출입관리
var sheet1 = sheetId1.getSheets()[0]; //sheet1의 첫번째 시트의 정보
var sheetId2 = spreadsheetApp.openById("1sih6bkdwEXYBku3T5FQ8wFHYMzF2-yWcH0UacGuwu0Q"); //차량 주차위치관리
var sheet2 = sheetId2.getSheets()[0]; //sheet2의 첫번째 시트의 정보
var parameter; //유니티에서 보낸 메시지받는 용도
var result, msg, value; //유니티로 돌려보낼 변수들

//시트->유니티
function doGet() //유니티에서 접근할 함수. 시트의 데이터를 가져가는 용도
{
  var sheetName = e.parameter.sheetName; // 가져올 시트의 이름을 파라미터로 받아옵니다.
  var sheet = spreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName); // 시트 이름을 사용하여 해당 시트를 가져옵니다.

  if (!sheet) {
    return ContentService.createTextOutput("해당 시트를 찾을 수 없습니다.");
  }

  var lastRow = sheet.getLastRow();
  var lastColumn = sheet.getLastColumn();
  var dataRange = sheet.getRange(1, 1, lastRow, lastColumn);
  var data = dataRange.getValues();

  var jsonData = JSON.stringify(data); // 시트 데이터를 JSON 형식으로 변환합니다.
  return ContentService.createTextOutput(jsonData);
}

//유니티->시트
function doPost(e) //유니티에서 접근할 함수. 유니티에서 시트로 보내는 용도
{
  parameter = e.parameter;

  switch(parameter.send)
  {
    //차량번호 보내기
    case "License" :
          License();
          break;
    
    case "Place" :
          Place();
          break;

    case "Out" :
          Out();
          break;

    case "PlaceOut" :
          PlaceOut();
          break;

    case "doGet" :
          doGet();
          break;
  }
  return response();
}

//차량정보입력
function License()
{
  var lastColume = sheet1.getLastColumn(); //현재 시트의 마지막 colume의 위치. 현재는 1번째이니 값은1이다.
  var lastRow = sheet1.getLastRow(); //현재 시트의 마지막 Row의 위치. 현재는 1번째에 License가 있기때문에 현재값은 1.
  var startRow = 2; //이름이 1번째이기 때문에 시작은 2번째에서
  var cell = sheet1.getRange(startRow, 1, lastRow, lastColume).getValues(); //지정 범위내의 데이터를 담는다.

  if (cell.some(row => row.includes(parameter.License))) //같은 이름의 차량이 있는 경우, 에러표시
  {
    setResult("false", "이미 있는 차량입니다.");
    return;
  }

  sheet1.appendRow([parameter.License, parameter.Intime]); //추가
  setResult("true", "차량을 확인하였습니다.");
}

//출차시
function Out()
{
  var targetValue = parameter.outcheck; // 찾고자 하는 특정 값
  var dataRange = sheet1.getDataRange(); // 시트의 데이터 범위 가져오기
  var data = dataRange.getValues(); // 시트의 데이터 가져오기
  var targetColumn = -1; // 특정 값이 있는 행의 인덱스

  for (var i = 0; i < data.length; i++) {
    var row = data[i];
    for (var j = 0; j < row.length; j++) {
      if (row[j] === targetValue) {
        targetRow = i + 1; // 0부터 시작하는 인덱스를 스프레드시트의 행 번호로 변환
        break;
      }
    }
    if (targetRow !== -1) {
      break;
    }
  }

  // 특정 값이 있는 행을 찾았을 경우
  if (targetRow !== -1) 
  {
    sheet1.getRange(targetRow, 3).setValue(parameter.OutTime); //해당차량의 행의 4번째 열에 입력
  } 
  else 
  {
    // 특정 값이 없는 경우에 대한 처리
    setResult("Error", "존재하지 않는 차량입니다.");
  }
}
/*
//주차했을 때
function Place()
{
  var targetValue = parameter.Place; // 찾고자 하는 특정 값
  var targetColumn = -1; // 특정 값이 있는 열의 인덱스

  var headers = sheet1.getRange(1, 1, 1, sheet1.getLastColumn()).getValues()[0]; // 첫 번째 행의 값(열 제목) 가져오기

  for (var i = 0; i < headers.length; i++) 
  {
    var value = headers[i];
    if (value === targetValue) {
      targetColumn = i + 1; // 0부터 시작하는 인덱스를 스프레드시트의 열 번호로 변환
      break;
    }
  
  }

  // 특정 값이 있는 열을 찾았을 경우
  if (targetColumn !== -1) 
  {
    var row = 2; // 2번째 행부터 검색 시작 (첫 번째 행은 열 제목이므로 제외)

    while (sheet1.getRange(row, targetColumn).getValue() !== "") 
    {
      var cellValue = sheet1.getRange(row, targetColumn).getValue();
      if (cellValue == "0") 
      {
        sheet1.getRange(row, targetColumn).setValue("1");
        // 해당 열의 값이 '0'인 경우
        // 원하는 작업을 수행하거나 조건을 만족했을 때 루프를 중단할 수 있습니다.
        break;
      }
      else if (cellValue == "1")
      {
        return setResult("Error", "이미 차량이 존재합니다.");
      }
      row++;
    }
  } 
  else 
  {
    setResult("Error", "존재하지 않는 자리입니다.");
  }
}*/

/*function PlaceOut()
{
  var targetValue = parameter.Place; // 찾고자 하는 특정 값
  var targetColumn = -1; // 특정 값이 있는 열의 인덱스

  var headers = sheet1.getRange(1, 1, 1, sheet1.getLastColumn()).getValues()[0]; // 첫 번째 행의 값(열 제목) 가져오기

  for (var i = 0; i < headers.length; i++) 
  {
    var value = headers[i];
    if (value === targetValue) {
      targetColumn = i + 1; // 0부터 시작하는 인덱스를 스프레드시트의 열 번호로 변환
      break;
    }
  
  }

  // 특정 값이 있는 열을 찾았을 경우
  if (targetColumn !== -1) 
  {
    var row = 2; // 2번째 행부터 검색 시작 (첫 번째 행은 열 제목이므로 제외)

    while (sheet1.getRange(row, targetColumn).getValue() !== "") 
    {
      var cellValue = sheet1.getRange(row, targetColumn).getValue();
      if (cellValue == "1") 
      {
        sheet1.getRange(row, targetColumn).setValue("0");
        // 해당 열의 값이 "1"인 경우
        // 원하는 작업을 수행하거나 조건을 만족했을 때 루프를 중단할 수 있습니다.
        break;
      }
      else if (cellValue == "0")
      {
        return setResult("Error", "이미 빈 자리입니다.");
      }
      row++;
    }
  } 
  else 
  {
    setResult("Error", "존재하지 않는 자리입니다.");
  }
}*/

function Place()
{
  var targetValue = parameter.Place;
  var data = sheet2.getDataRange().getValues();
  var targetRow = -1;

  for (var i = 1; i < data.length; i++) { // 첫 번째 행은 열 제목이므로 제외하고 탐색
    if (data[i][0] === targetValue) { // ParkingPlace 값이 일치하는 행 찾기
      targetRow = i + 1; // 실제 시트의 행 번호로 변환
      break;
    }
  }

  if (targetRow !== -1) 
  { 
    // ParkingPlace 값이 있는 행을 찾았을 경우
    sheet2.getRange(targetRow, 2).setValue(parameter.License); // 찾은 행의 두 번째 열에 CarNum 값 입력
    response("Success", "주차완료");
  } 
  else 
  { 
    // ParkingPlace 값이 없는 경우
    response("Error", "존재하지않는 자리입니다.");
  }
}

function PlaceOut()
{
  var targetValue = parameter.Place;
  var data = sheet2.getDataRange().getValues();
  var targetRow = -1;

  for (var i = 1; i < data.length; i++) { // 첫 번째 행은 열 제목이므로 제외하고 탐색
    if (data[i][0] === targetValue) { // ParkingPlace 값이 일치하는 행 찾기
      targetRow = i + 1; // 실제 시트의 행 번호로 변환
      break;
    }
  }

  if (targetRow !== -1) 
  { 
    // ParkingPlace 값이 있는 행을 찾았을 경우
    sheet2.getRange(targetRow, 2).setValue("0"); // 찾은 행의 두 번째 열에 CarNum 값 입력
    response("Success", "빠짐");
  } 
  else 
  { 
    // ParkingPlace 값이 없는 경우
    response("Error", "존재하지않는 자리입니다.");
  }
}

function setResult(_result, _msg)
{
  result = _result;
  msg = _msg;
}

//시트->유니티로 응답할 데이터 저장
function response()
{
  var json = {};
  json.license = parameter.License;
  json.result = result;
  json.msg = msg;
  json.value = value;

  jsonData = JSON.stringify(json);
  return ContentService.createTextOutput(jsonData);
}